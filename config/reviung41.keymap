/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV 1
#define NUM 2
#define PRG 3
#define FUN 4

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

&lt {
  tapping-term-ms = <200>;
};

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    combos {
      compatible = "zmk,combos";

      COMBO(esckey, &kp ESC, 20 21)
      COMBO(capsword, &caps_word, 15 20)
    };

    tdlpar: tap_dance_lpar {
       compatible = "zmk,behavior-tap-dance";
       label = "TAP_DANCE_LPAR";
       #binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&kp T>, <&kp LPAR>;
    };

    tdrpar: tap_dance_rpar {
       compatible = "zmk,behavior-tap-dance";
       label = "TAP_DANCE_RPAR";
       #binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = <&kp Y>, <&kp RPAR>;
    };

  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      // ---------------------------------------------------------
      // | Q | W | E |  R  |  T  |   |   |  Y  |  U  | I | O | P |
      // | A | S | D |  F  |  G  |   |   |  H  |  J  | K | L | ; |
      // | Z | X | C |  V  |  B  |   |   |  N  |  M  | , | . | / |
      //             | TAB | SPC |       | RET | BSP |
      bindings = <
        &kp Q       &kp W       &kp E      &kp R       &tdlpar &none &none &tdrpar &kp U      &kp I      &kp O       &kp P
        &hm LCTRL A &hm LSHFT S &hm LALT D &hm LGUI F  &kp G   &none &none &kp H   &hm RGUI J &hm RALT K &hm RSHFT L &hm RCTRL SEMI
        &kp Z       &kp X       &kp C      &kp V       &kp B   &none &none &kp N   &kp M      &kp COMMA  &kp DOT     &kp FSLH
        &lt FUN TAB &lt NAV SPC &none      &lt PRG RET &lt NUM BSPC
      >;
    };

    nav_layer {
      // -------------------------------------------------
      // |   |   |   |   |   |   |   |   | { | } | ( | ) |
      // |   |   |   |   |   |   |   | L | D | U | R |   |
      // |   |   |   |   |   |   |   | [ | ] |   |   |   |
      //             |   |   |       |   |   |
      bindings = <
        &trans &trans &trans &trans &trans &none &none &trans   &kp LBRC &kp RBRC &kp LPAR  &kp RPAR
        &trans &trans &trans &trans &trans &none &none &kp LEFT &kp DOWN &kp UP   &kp RIGHT &trans
        &trans &trans &trans &trans &trans &none &none &kp LBKT &kp RBKT &trans   &trans    &trans
        &trans &trans &none  &trans &trans
      >;
    };

    num_layer {
      // ---------------------------------------------------------
      // |  +  |  -  |  *  |  /  | = |   |   | , | 7 | 8 | 9 |   |
      // | CTL | SFT | ALT | GUI |   |   |   | . | 4 | 5 | 6 |   |
      // |     |     |     |     |   |   |   | 0 | 1 | 2 | 3 |   |
      //                   |     |   |       |   |
      bindings = <
        &trans &kp N9 &kp N8 &kp N7 &kp COMMA &none &none &kp EQUAL &kp SLASH &kp STAR &kp MINUS &kp PLUS
        &trans &kp N6 &kp N5 &kp N4 &kp DOT   &none &none &trans    &trans    &trans   &trans    &trans
        &trans &kp N3 &kp N2 &kp N1 &kp N0    &none &none &trans    &trans    &trans   &trans    &trans
        &trans &trans &none  &trans &trans
        >;
    };

    prg_layer {
      // ---------------------------------------------------------
      // | + | - | * | & | = |   |   |   |     |     |     |     |
      // | ' | ^ | % | $ | " |   |   |   | GUI | ALT | SFT | CTL |
      // | ` | # | @ | ! | ~ |   |   |   |     |     |     |     |
      //             | \ | | |       |   |     |
      bindings = <
        &kp TILDE &kp GRAVE &kp STAR  &kp AMPS &kp GRAVE &none &none &trans &trans &trans &kp UNDER &kp EQUAL
        &kp SQT   &kp CARET &kp PRCNT &kp DLLR &kp DQT   &none &none &trans &trans &trans &trans    &trans
        &kp BSLH  &kp HASH  &kp AT    &kp EXCL &kp PIPE  &none &none &trans &trans &trans &trans    &trans
        &trans    &trans    &none     &trans   &trans
      >;
    };

    fun_layer {
      // ------------------------------------------------------------------
      // | F12 | F9 | F8 | F7 |   |   |   | BT0 | BT1 | BT2 | BT3 | BT4 |
      // | F11 | F6 | F5 | F4 |   |   |   |     | GUI | ALT | SFT | CTL |
      // | F10 | F3 | F2 | F1 |   |   |   |     | PP  | NEX | PRE |     |
      //                 |    |   |       |     |     |
      bindings = <
        &kp F12 &kp F9 &kp F8 &kp F7 &trans &none &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
        &kp F11 &kp F6 &kp F5 &kp F4 &trans &none &none &bootloader  &trans       &trans       &trans       &bt BT_CLR
        &kp F10 &kp F3 &kp F2 &kp F1 &trans &none &none &trans       &kp C_PP     &kp C_PREV   &kp C_NEXT   &trans
        &trans  &trans &none  &trans &trans
      >;
    };
  };
};

// vim: set ft=c:
