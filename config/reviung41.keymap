/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define L1 1
#define L2 2
#define L3 3

&mt {
  tapping-term-ms = <300>;
};

&lt {
  tapping-term-ms = <300>;
};

/ {
    behaviors {
      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
    };

    keymap {
      compatible = "zmk,keymap";

      default_layer {
//      ---------------------------------------------------------------------
//      | Q | W | E | R   |    T    | ?? | ?? |    Y    | U    | I  | O | P |
//      | A | S | D | F   |    G    | ?? | ?? |    H    | J    | K  | L | ; |
//      | Z | X | C | V   |    B    | ?? | ?? |    N    | M    | ,  | . | / |
//                  | TAB | LWR/SPC | ADJ/ESC | RSE/RET | BSPC |
        bindings = <
         &none &kp Q       &kp W       &kp E      &kp R      &kp T &kp Y &kp U      &kp I      &kp O       &kp P          &none
         &none &hm LCTRL A &hm LSHFT S &hm LALT D &hm LGUI F &kp G &kp H &hm RGUI J &hm RALT K &hm RSHFT L &hm RCTRL SEMI &none
         &none &kp Z       &kp X       &kp C      &kp V      &kp B &kp N &kp M      &kp COMMA  &kp DOT     &kp FSLH       &none
                                        &kp TAB    &lt L1 SPC &lt L3 ESC  &lt L2 RET &kp BSPC
        >;
      };

      lower_layer {
//      -------------------------------------------------------
//      | `    | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |  =   |
//      | BSPC | 6 | 7 | 8 | 9 | 0 |   |   |   |   |   | BSPC |
//      |      |   |   |   |   |   |   |   |   |   |   |  \   |
//                     |   |       |   |   |
        bindings = <
         &trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp GRAVE &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &trans
         &trans &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans    &trans    &trans    &trans   &kp SQT  &trans
         &trans &trans &trans &trans &trans &trans &trans    &trans    &trans    &trans   &kp BSLH &trans
                              &trans &trans &trans           &kp ESC   &trans
        >;
      };

      raise_layer {
//      ---------------------------------------------------------------
//      | ~    | ! | @ | # | $ | % |  ^  |  &  |  *  |  (  | ) |  +   |
//      | BSPC | ^ | & | * | [ | ] | LFT | DWN |  UP | RGT | : | BSPC |
//      |      |   |   |   |   |   |     |     |     |     |   |  |   |
//                     |   |   |         |     |
        bindings = <
         &trans &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT &kp TILDE &kp UNDER &kp PLUS &kp LBRC  &kp RBRC &trans
         &trans &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR  &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &kp DQT  &trans
         &trans &trans    &trans   &trans   &trans   &trans    &trans    &trans    &trans   &trans    &kp PIPE &trans
                                   &trans   &kp ESC  &trans              &trans    &trans
        >;
      };

      adjust_layer {
//      ----------------------------------------------------------------------------------
//      | ? | ?    | ?    | ?    | RESET |  ?  | BT1 | BT2  | BT3  | BT4  | BT5 | BT CLR |
//      | ? | ?    | ?    | ?    | ?     |  ?  |     |      |      |      |     |        |
//      |   | MUTE | VOL- | VOL+ |       | BLE |     | PLAY | PREV | NEXT |     |        |
//                        |      |       |           |      |      |
        bindings = <
         &none &kp F1     &kp F2       &kp F3       &kp F4      &kp F5       &kp F6       &kp F7       &kp F8       &kp F9       &kp F10 &none
         &none &kp F11    &reset       &none        &bootloader &bt BT_CLR   &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp F12 &none
         &none &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &none       &out OUT_BLE &none        &kp C_PP     &kp C_PREV   &kp C_NEXT   &none   &none
                                       &trans       &trans      &trans                    &trans       &trans
        >;
      };
    };
};
